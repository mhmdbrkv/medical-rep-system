// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------ USERS & ROLES ------------------

model User {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  password String
  phone    String
  role     Role    @default(MEDICAL_REP)
  regionId String?
  region   Region? @relation(fields: [regionId], references: [id])

  // Hierarchy
  supervisorId String? // Reps belong to a supervisor
  supervisor   User?   @relation("SupervisorToReps", fields: [supervisorId], references: [id])
  reps         User[]  @relation("SupervisorToReps")

  // Relations
  sales        Sale[]
  visits       Visit[]
  reports      Report[]
  targets      Target[]
  requests     Request[]     @relation("UserRequests")
  approvals    Approval[]    @relation("UserApprovals")
  activityLogs ActivityLog[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Plan      Plan[]
  PlanDay   PlanDay[]
}

enum Role {
  SUPERVISOR
  MEDICAL_REP
}

// ------------------ REGIONS ------------------
model Region {
  id      String   @id @default(uuid())
  name    String
  city    String
  country String
  users   User[]
  clients Client[]
}

// ------------------ CLIENTS (Doctors & Pharmacies) ------------------
model Client {
  id        String     @id @default(uuid())
  name      String
  type      ClientType
  phone     String?
  location  String? // Optional Google Maps link
  latitude  Float
  longitude Float
  regionId  String
  region    Region     @relation(fields: [regionId], references: [id])
  sales     Sale[]
  visits    Visit[]
  createdAt DateTime   @default(now())
}

enum ClientType {
  DOCTOR
  PHARMACY
}

// ------------------ PRODUCTS ------------------
model Product {
  id         String      @id @default(uuid())
  name       String
  category   String?
  price      Float
  plans      Plan[]
  sales      Sale[]
  promotions Promotion[]
}

// ------------------ PLANS ------------------
model Plan {
  id          String    @id @default(uuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id])
  planDays    PlanDay[]
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Target      Target[]
}

model PlanDay {
  id     String   @id @default(uuid())
  planId String
  repId  String
  date   DateTime
  plan   Plan     @relation(fields: [planId], references: [id])
  rep    User     @relation(fields: [repId], references: [id])
  visits Visit[]
}

// ------------------ SALES ------------------
model Sale {
  id         String   @id @default(uuid())
  productId  String
  clientId   String
  userId     String
  quantity   Int
  totalPrice Float
  saleDate   DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id])
  client     Client   @relation(fields: [clientId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

// ------------------ VISITS ------------------
model Visit {
  id           String      @id @default(uuid())
  repId        String
  clientId     String
  planDayId    String?
  visitDate    DateTime
  repLatitude  Float?
  repLongitude Float?
  status       VisitStatus @default(PENDING)
  distance     Float? // calculated distance between rep and client
  client       Client      @relation(fields: [clientId], references: [id])
  rep          User        @relation(fields: [repId], references: [id])
  planDay      PlanDay?    @relation(fields: [planDayId], references: [id])
}

enum VisitStatus {
  PENDING
  COMPLETED
  MISSED
}

// ------------------ TARGETS ------------------
model Target {
  id       String @id @default(uuid())
  userId   String
  planId   String
  goal     Float
  achieved Float  @default(0)
  user     User   @relation(fields: [userId], references: [id])
  plan     Plan   @relation(fields: [planId], references: [id])
}

// ------------------ REPORTS ------------------
model Report {
  id        String   @id @default(uuid())
  userId    String
  title     String
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

// ------------------ PROMOTIONS ------------------
model Promotion {
  id          String   @id @default(uuid())
  productId   String
  description String
  discount    Float
  startDate   DateTime
  endDate     DateTime
  product     Product  @relation(fields: [productId], references: [id])
}

// ------------------ LOGGING ------------------
model ActivityLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

// ------------------ Request ------------------
model Request {
  id           String        @id @default(uuid())
  userId       String
  supervisorId String?
  managerId    String?
  type         RequestType
  status       RequestStatus @default(PENDING)
  title        String
  description  String?
  amount       Float?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  user      User       @relation("UserRequests", fields: [userId], references: [id])
  approvals Approval[]
}

enum RequestType {
  EXPENSE // مصاريف
  MARKETING // دعم تسويقي
  SAMPLE // عينات
  LEAVE // إجازة
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

// ------------------ Approval ------------------
model Approval {
  id           String         @id @default(uuid())
  requestId    String
  approvedById String
  role         Role
  action       ApprovalAction
  comment      String?
  createdAt    DateTime       @default(now())

  approvedBy User    @relation("UserApprovals", fields: [approvedById], references: [id])
  request    Request @relation(fields: [requestId], references: [id])
}

enum ApprovalAction {
  APPROVE
  REJECT
}
